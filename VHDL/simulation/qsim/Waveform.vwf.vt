// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2015 01:20:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU4_vlg_sample_tst(
	S,
	X,
	Y,
	sampler_tx
);
input [2:0] S;
input [3:0] X;
input [3:0] Y;
output sampler_tx;

reg sample;
time current_time;
always @(S or X or Y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU4_vlg_check_tst (
	cOut,
	OVFLW,
	Z,
	sampler_rx
);
input  cOut;
input  OVFLW;
input [3:0] Z;
input sampler_rx;

reg  cOut_expected;
reg  OVFLW_expected;
reg [3:0] Z_expected;

reg  cOut_prev;
reg  OVFLW_prev;
reg [3:0] Z_prev;

reg  cOut_expected_prev;
reg [3:0] Z_expected_prev;

reg  last_cOut_exp;
reg [3:0] last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	cOut_prev = cOut;
	OVFLW_prev = OVFLW;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	cOut_expected_prev = cOut_expected;
	Z_expected_prev = Z_expected;
end


// expected Z[ 3 ]
initial
begin
	Z_expected[3] = 1'bX;
end 
// expected Z[ 2 ]
initial
begin
	Z_expected[2] = 1'bX;
end 
// expected Z[ 1 ]
initial
begin
	Z_expected[1] = 1'bX;
end 
// expected Z[ 0 ]
initial
begin
	Z_expected[0] = 1'bX;
end 

// expected cOut
initial
begin
	cOut_expected = 1'bX;
end 
// generate trigger
always @(cOut_expected or cOut or OVFLW_expected or OVFLW or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cOut = %b | expected OVFLW = %b | expected Z = %b | ",cOut_expected_prev,OVFLW_expected_prev,Z_expected_prev);
	$display("| real cOut = %b | real OVFLW = %b | real Z = %b | ",cOut_prev,OVFLW_prev,Z_prev);
`endif
	if (
		( cOut_expected_prev !== 1'bx ) && ( cOut_prev !== cOut_expected_prev )
		&& ((cOut_expected_prev !== last_cOut_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cOut_expected_prev);
		$display ("     Real value = %b", cOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cOut_exp = cOut_expected_prev;
	end
	if (
		( Z_expected_prev[0] !== 1'bx ) && ( Z_prev[0] !== Z_expected_prev[0] )
		&& ((Z_expected_prev[0] !== last_Z_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[0] = Z_expected_prev[0];
	end
	if (
		( Z_expected_prev[1] !== 1'bx ) && ( Z_prev[1] !== Z_expected_prev[1] )
		&& ((Z_expected_prev[1] !== last_Z_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[1] = Z_expected_prev[1];
	end
	if (
		( Z_expected_prev[2] !== 1'bx ) && ( Z_prev[2] !== Z_expected_prev[2] )
		&& ((Z_expected_prev[2] !== last_Z_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[2] = Z_expected_prev[2];
	end
	if (
		( Z_expected_prev[3] !== 1'bx ) && ( Z_prev[3] !== Z_expected_prev[3] )
		&& ((Z_expected_prev[3] !== last_Z_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[3] = Z_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] S;
reg [3:0] X;
reg [3:0] Y;
// wires                                               
wire cOut;
wire OVFLW;
wire [3:0] Z;

wire sampler;                             

// assign statements (if any)                          
ALU4 i1 (
// port map - connection between master ports and signals/registers   
	.cOut(cOut),
	.OVFLW(OVFLW),
	.S(S),
	.X(X),
	.Y(Y),
	.Z(Z)
);
// S[ 2 ]
always
begin
	S[2] = 1'b0;
	S[2] = #500000 1'b1;
	#500000;
end 
// S[ 1 ]
always
begin
	S[1] = 1'b0;
	S[1] = #250000 1'b1;
	#250000;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #125000 1'b1;
	#125000;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b1;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b1;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b0;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b0;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b0;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b1;
end 
// Y[ 0 ]
initial
begin
	Y[0] = 1'b1;
end 

ALU4_vlg_sample_tst tb_sample (
	.S(S),
	.X(X),
	.Y(Y),
	.sampler_tx(sampler)
);

ALU4_vlg_check_tst tb_out(
	.cOut(cOut),
	.OVFLW(OVFLW),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

